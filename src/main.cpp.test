#include "config/config.hpp"
#include "file_manager/file_manager.hpp"
#include "hooks/hooking.hpp"
#include "logger/exception_handler.hpp"
#include "memory/byte_patch_manager.hpp"
#include "paths/paths.hpp"
#include "threads/thread_pool.hpp"
#include "threads/util.hpp"

#include <directory_watcher/directory_watcher.hpp>
#include <logger/logger.hpp>
#include <memory/gm_address.hpp>
#include <rom/rom.hpp>
#include <windows.h>

int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
{
	using namespace big;

	rom::init("ReturnOfModdingBaseTest", "ReturnOfModdingBaseTest.exe", "rom");

	// Purposely leak it, we are not unloading this module in any case.
	auto exception_handling = new exception_handler();

	// https://learn.microsoft.com/en-us/cpp/c-runtime-library/reference/setlocale-wsetlocale?view=msvc-170#utf-8-support
	setlocale(LC_ALL, ".utf8");
	// This also change things like stringstream outputs and add comma to numbers and things like that, we don't want that, so just set locale on the C apis instead.
	//std::locale::global(std::locale(".utf8"));

	std::filesystem::path root_folder = paths::get_project_root_folder();
	g_file_manager.init(root_folder);
	paths::init_dump_file_path();

	big::config::init_general();

	auto logger_instance = std::make_unique<logger>(rom::g_project_name, g_file_manager.get_project_file("./LogOutput.log"));

	static struct logger_cleanup
	{
		~logger_cleanup()
		{
			Logger::Destroy();
		}
	} g_logger_cleanup;

	auto directory = g_file_manager.get_project_folder("./plugins").get_path();

	std::thread(
	    [directory]
	    {
		    std::vector<big::directory_watcher> watchers;
		    watchers.emplace_back(std::filesystem::absolute(directory));
		    for (const auto& entry : std::filesystem::recursive_directory_iterator(directory, std::filesystem::directory_options::skip_permission_denied))
		    {
			    if (!entry.is_directory())
			    {
				    continue;
			    }

			    watchers.emplace_back(std::filesystem::absolute(entry.path()));
		    }

		    while (true)
		    {
			    size_t i = 0;
			    for (const auto& watcher : watchers)
			    {
				    auto modified_files = watcher.check();
				    for (const auto& file_path : modified_files)
				    {
					    LOG(INFO) << (char*)file_path.u8string().c_str();

					    auto fullPath = file_path.wstring();
					    if (fullPath.ends_with(L".lua"))
					    {
						    LOG(INFO) << "lua file changed";
					    }
				    }
			    }

			    using namespace std::chrono_literals;
			    std::this_thread::sleep_for(500ms);
		    }
	    })
	    .detach();

	while (true)
	{
		Sleep(1000);
	}

	return 0;
}
